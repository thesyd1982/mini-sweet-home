#!/bin/bash

# ==========================================
# üè† MINI SWEET HOME - SETUP PRINCIPAL
# ==========================================
# Usage: curl -sSL <url>/setup | bash
# Usage: ./setup [minimal|modern|developer|server]

set -euo pipefail

# ==========================================
# CONFIGURATION ET CONSTANTES
# ==========================================

readonly SCRIPT_VERSION="2.0.0"
readonly REPO_URL="https://github.com/user/mini-sweet-home"
readonly INSTALL_DIR="$HOME/.mini-sweet-home"
readonly CONFIG_DIR="$HOME/.config/mini-sweet-home"
readonly BACKUP_DIR="$HOME/.mini-sweet-home-backup"

# Couleurs pour l'affichage
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly RESET='\033[0m'

# ==========================================
# FONCTIONS UTILITAIRES
# ==========================================

log_info() { echo -e "${BLUE}[INFO]${RESET} $1"; }
log_success() { echo -e "${GREEN}[‚úì]${RESET} $1"; }
log_warning() { echo -e "${YELLOW}[‚ö†]${RESET} $1"; }
log_error() { echo -e "${RED}[‚úó]${RESET} $1"; }
log_header() { echo -e "${CYAN}${BOLD}$1${RESET}"; }

command_exists() { command -v "$1" >/dev/null 2>&1; }
is_wsl() { grep -qi microsoft /proc/version 2>/dev/null; }
is_macos() { [[ "$OSTYPE" == "darwin"* ]]; }
is_linux() { [[ "$OSTYPE" == "linux-gnu"* ]]; }

detect_os() {
    if is_macos; then
        echo "macos"
    elif is_linux; then
        if command_exists apt; then
            echo "ubuntu"
        elif command_exists dnf; then
            echo "fedora"
        elif command_exists pacman; then
            echo "arch"
        else
            echo "linux"
        fi
    else
        echo "unknown"
    fi
}

check_requirements() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier l'OS support√©
    local os=$(detect_os)
    if [[ "$os" == "unknown" ]]; then
        log_error "OS non support√©"
        return 1
    fi
    log_success "OS d√©tect√© : $os$(is_wsl && echo " (WSL)")"
    
    # V√©rifier curl
    if ! command_exists curl; then
        log_error "curl est requis mais non install√©"
        return 1
    fi
    log_success "curl disponible"
    
    # V√©rifier git
    if ! command_exists git; then
        log_warning "git non install√© (sera install√© automatiquement)"
    else
        log_success "git disponible"
    fi
    
    # V√©rifier l'espace disque (minimum 500MB)
    local available_space=$(df "$HOME" | awk 'NR==2 {print $4}')
    if [[ $available_space -lt 500000 ]]; then
        log_error "Espace disque insuffisant (minimum 500MB requis)"
        return 1
    fi
    log_success "Espace disque suffisant"
    
    # V√©rifier les permissions
    if [[ ! -w "$HOME" ]]; then
        log_error "Permissions insuffisantes dans $HOME"
        return 1
    fi
    log_success "Permissions OK"
    
    return 0
}

# ==========================================
# PROFILS D'INSTALLATION
# ==========================================

show_profile_menu() {
    clear
    log_header "üè† Mini Sweet Home - Installation"
    echo
    echo "Choisissez votre profil d'installation :"
    echo
    echo -e "${CYAN}1)${RESET} üèÉ‚Äç‚ôÇÔ∏è ${BOLD}Minimal${RESET}      - Configs de base uniquement         (~2 min, 50MB)"
    echo -e "${CYAN}2)${RESET} ‚ö° ${BOLD}Modern${RESET}       - Minimal + outils modernes CLI      (~5 min, 200MB)"  
    echo -e "${CYAN}3)${RESET} üë©‚Äçüíª ${BOLD}Developer${RESET}    - Setup d√©veloppeur complet          (~10 min, 500MB)"
    echo -e "${CYAN}4)${RESET} üñ•Ô∏è ${BOLD}Server${RESET}       - Configuration serveur optimis√©e    (~3 min, 100MB)"
    echo -e "${CYAN}5)${RESET} üîß ${BOLD}Custom${RESET}       - Installation personnalis√©e"
    echo -e "${CYAN}6)${RESET} ‚ùå ${BOLD}Exit${RESET}         - Annuler l'installation"
    echo
}

get_user_choice() {
    local choice
    while true; do
        read -p "Votre choix [1-6]: " choice
        case $choice in
            1) echo "minimal"; return ;;
            2) echo "modern"; return ;;
            3) echo "developer"; return ;;
            4) echo "server"; return ;;
            5) echo "custom"; return ;;
            6) log_info "Installation annul√©e"; exit 0 ;;
            *) log_warning "Choix invalide, veuillez r√©essayer" ;;
        esac
    done
}

describe_profile() {
    local profile="$1"
    
    case "$profile" in
        minimal)
            echo -e "${BOLD}Profil Minimal${RESET} üèÉ‚Äç‚ôÇÔ∏è"
            echo "‚Ä¢ Configurations shell (zsh, aliases)"
            echo "‚Ä¢ Git configuration de base"
            echo "‚Ä¢ Tmux configuration simple"
            echo "‚Ä¢ Neovim avec config minimale"
            echo
            echo -e "‚è±Ô∏è  Temps estim√© : ${GREEN}2 minutes${RESET}"
            echo -e "üíæ Espace requis : ${GREEN}50MB${RESET}"
            ;;
        modern)
            echo -e "${BOLD}Profil Modern${RESET} ‚ö°"
            echo "‚Ä¢ Tout de Minimal +"
            echo "‚Ä¢ Rust toolchain + Cargo"
            echo "‚Ä¢ Outils modernes : dust, ripgrep, fd, bat, exa"
            echo "‚Ä¢ Starship prompt + Zoxide navigation"
            echo "‚Ä¢ Neovim avec plugins essentiels"
            echo
            echo -e "‚è±Ô∏è  Temps estim√© : ${YELLOW}5 minutes${RESET}"
            echo -e "üíæ Espace requis : ${YELLOW}200MB${RESET}"
            ;;
        developer)
            echo -e "${BOLD}Profil Developer${RESET} üë©‚Äçüíª"
            echo "‚Ä¢ Tout de Modern +"
            echo "‚Ä¢ Node.js, Python, Go"
            echo "‚Ä¢ Docker configuration"
            echo "‚Ä¢ LSP servers pour Neovim"
            echo "‚Ä¢ Outils d√©veloppement complets"
            echo "‚Ä¢ Configurations Git avanc√©es"
            echo
            echo -e "‚è±Ô∏è  Temps estim√© : ${RED}10 minutes${RESET}"
            echo -e "üíæ Espace requis : ${RED}500MB${RESET}"
            ;;
        server)
            echo -e "${BOLD}Profil Server${RESET} üñ•Ô∏è"
            echo "‚Ä¢ Configuration optimis√©e serveur"
            echo "‚Ä¢ Outils monitoring et admin"
            echo "‚Ä¢ S√©curit√© renforc√©e"
            echo "‚Ä¢ Pas d'interface graphique"
            echo "‚Ä¢ Tmux avec monitoring int√©gr√©"
            echo
            echo -e "‚è±Ô∏è  Temps estim√© : ${YELLOW}3 minutes${RESET}"
            echo -e "üíæ Espace requis : ${GREEN}100MB${RESET}"
            ;;
    esac
}

confirm_installation() {
    local profile="$1"
    
    echo
    describe_profile "$profile"
    echo
    
    local response
    read -p "Continuer avec l'installation ? [Y/n]: " response
    case "$response" in
        [nN][oO]|[nN]) 
            log_info "Installation annul√©e"
            exit 0
            ;;
        *) 
            return 0
            ;;
    esac
}

# ==========================================
# GESTION D'ERREURS ET NETTOYAGE
# ==========================================

cleanup() {
    local exit_code=$?
    
    if [[ $exit_code -ne 0 ]]; then
        log_error "Installation √©chou√©e"
        
        if [[ -d "$INSTALL_DIR" ]]; then
            log_info "Nettoyage des fichiers temporaires..."
            rm -rf "$INSTALL_DIR"
        fi
        
        # Restaurer les sauvegardes si elles existent
        for backup in "$HOME"/.{zshrc,tmux.conf,gitconfig}.backup; do
            if [[ -f "$backup" ]]; then
                mv "$backup" "${backup%.backup}"
            fi
        done
        
        echo
        log_error "Installation annul√©e. Configurations restaur√©es."
        log_info "Pour r√©essayer : curl -sSL <url>/setup | bash"
    fi
}

trap cleanup EXIT

# ==========================================
# FONCTION PRINCIPALE
# ==========================================

main() {
    local profile="${1:-}"
    
    # Affichage du header
    log_header "üè† Mini Sweet Home v$SCRIPT_VERSION"
    echo
    
    # V√©rification des pr√©requis
    if ! check_requirements; then
        log_error "Pr√©requis non satisfaits"
        exit 1
    fi
    
    # S√©lection du profil si non sp√©cifi√©
    if [[ -z "$profile" ]]; then
        show_profile_menu
        profile=$(get_user_choice)
    fi
    
    # Validation du profil
    case "$profile" in
        minimal|modern|developer|server|custom)
            ;;
        *)
            log_error "Profil invalide: $profile"
            exit 1
            ;;
    esac
    
    # Confirmation
    confirm_installation "$profile"
    
    # Simulation d'installation pour d√©monstration
    log_info "D√©but de l'installation..."
    sleep 1
    
    log_info "Installation des d√©pendances de base..."
    sleep 1
    log_success "D√©pendances install√©es"
    
    log_info "T√©l√©chargement du repository..."
    sleep 1
    log_success "Repository t√©l√©charg√©"
    
    log_info "Installation du profil : $profile"
    sleep 2
    log_success "Profil $profile install√©"
    
    log_info "Configuration de l'int√©gration shell..."
    sleep 1
    log_success "Int√©gration configur√©e"
    
    # Message de fin
    clear
    log_header "üéâ Installation termin√©e avec succ√®s !"
    echo
    echo -e "${GREEN}Profil install√© :${RESET} ${BOLD}$profile${RESET}"
    echo
    echo "üöÄ Pour commencer :"
    echo -e "   ${CYAN}exec zsh${RESET}         # Red√©marrer le shell"
    echo -e "   ${CYAN}tmux${RESET}             # Lancer tmux"
    echo -e "   ${CYAN}nvim${RESET}             # Ouvrir Neovim"
    echo
    
    if [[ "$profile" == "modern" ]] || [[ "$profile" == "developer" ]]; then
        echo "‚ö° Nouveaux outils disponibles :"
        echo -e "   ${CYAN}dust${RESET}             # Analyseur d'espace disque"
        echo -e "   ${CYAN}rg pattern${RESET}       # Recherche rapide"
        echo -e "   ${CYAN}fd filename${RESET}      # Trouver des fichiers"
        echo -e "   ${CYAN}bat file.txt${RESET}     # Afficher avec coloration"
        echo -e "   ${CYAN}exa -la${RESET}          # Listing moderne"
        echo
    fi
    
    echo "üìö Documentation :"
    echo -e "   ${CYAN}~/.mini-sweet-home/docs/${RESET}"
    echo
    echo "üõ†Ô∏è  Commandes utiles :"
    echo -e "   ${CYAN}msh update${RESET}       # Mettre √† jour"
    echo -e "   ${CYAN}msh doctor${RESET}       # Diagnostic"
    echo -e "   ${CYAN}msh backup${RESET}       # Sauvegarder"
    echo
    
    # Message sp√©cifique WSL
    if is_wsl; then
        echo "üí° WSL d√©tect√© - Optimisations appliqu√©es !"
        echo
    fi
    
    echo -e "${GREEN}Profitez de votre nouvel environnement !${RESET}"
}

# ==========================================
# POINT D'ENTR√âE
# ==========================================

# V√©rifier si le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
