#!/bin/bash

# ===============================
# üõ†Ô∏è MINI SWEET HOME - DEPENDENCY MANAGER
# ===============================

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[DEPS]${NC} $1"; }
success() { echo -e "${GREEN}[OK]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# ===============================
# üîç DETECTION FUNCTIONS
# ===============================

check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "$ID" in
            ubuntu|debian) echo "ubuntu" ;;
            fedora|rhel|centos) echo "fedora" ;;
            arch|manjaro) echo "arch" ;;
            *) echo "linux" ;;
        esac
    else
        echo "unknown"
    fi
}

get_package_manager() {
    case "$(detect_os)" in
        ubuntu) echo "apt" ;;
        fedora) echo "dnf" ;;
        arch) echo "pacman" ;;
        macos) echo "brew" ;;
        *) echo "unknown" ;;
    esac
}

# ===============================
# üì¶ INSTALLATION FUNCTIONS
# ===============================

install_with_package_manager() {
    local package="$1"
    local pm="$(get_package_manager)"
    
    case "$pm" in
        apt)
            if ! dpkg -l | grep -q "^ii  $package "; then
                log "Installing $package via apt..."
                sudo apt update -qq && sudo apt install -y "$package"
                return $?
            fi
            ;;
        dnf)
            if ! rpm -q "$package" >/dev/null 2>&1; then
                log "Installing $package via dnf..."
                sudo dnf install -y "$package"
                return $?
            fi
            ;;
        pacman)
            if ! pacman -Q "$package" >/dev/null 2>&1; then
                log "Installing $package via pacman..."
                sudo pacman -S --noconfirm "$package"
                return $?
            fi
            ;;
        brew)
            if ! brew list "$package" >/dev/null 2>&1; then
                log "Installing $package via brew..."
                brew install "$package"
                return $?
            fi
            ;;
        *)
            warn "Unknown package manager, cannot install $package"
            return 1
            ;;
    esac
    return 0
}

# ===============================
# ü¶Ä RUST ECOSYSTEM
# ===============================

install_rust() {
    if ! check_command cargo; then
        log "Installing Rust toolchain..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
        source "$HOME/.cargo/env"
        success "Rust installed: $(rustc --version)"
    else
        log "Rust already available: $(rustc --version)"
    fi
}

install_rust_tool() {
    local tool="$1"
    local crate="${2:-$tool}"
    
    if ! check_command "$tool"; then
        if check_command cargo; then
            log "Installing $tool via cargo..."
            cargo install "$crate" --quiet
            if check_command "$tool"; then
                success "$tool installed successfully"
            else
                warn "$tool installation may have failed"
            fi
        else
            warn "Cargo not available, cannot install $tool"
            return 1
        fi
    else
        log "$tool already available"
    fi
}

# ===============================
# üêπ GO ECOSYSTEM
# ===============================

install_go() {
    if ! check_command go; then
        log "Installing Go..."
        case "$(detect_os)" in
            ubuntu|fedora|arch)
                local go_version="1.21.5"
                local go_url="https://go.dev/dl/go${go_version}.linux-amd64.tar.gz"
                
                # Download and install
                wget -q "$go_url" -O /tmp/go.tar.gz
                sudo rm -rf /usr/local/go
                sudo tar -C /usr/local -xzf /tmp/go.tar.gz
                rm /tmp/go.tar.gz
                
                # Add to current session PATH
                export PATH=$PATH:/usr/local/go/bin
                export GOPATH=$HOME/go
                export GOBIN=$GOPATH/bin
                
                success "Go installed: $(go version)"
                ;;
            macos)
                install_with_package_manager go
                ;;
            *)
                warn "Cannot install Go on unknown OS"
                return 1
                ;;
        esac
    else
        log "Go already available: $(go version)"
    fi
}

install_go_tool() {
    local tool="$1"
    local package="$2"
    
    if ! check_command "$tool"; then
        if check_command go; then
            log "Installing $tool via go install..."
            go install "$package"
            if check_command "$tool"; then
                success "$tool installed successfully"
            else
                warn "$tool installation may have failed"
            fi
        else
            warn "Go not available, cannot install $tool"
            return 1
        fi
    else
        log "$tool already available"
    fi
}

# ===============================
# üéØ NEOVIM INSTALLATION
# ===============================

install_neovim() {
    if ! check_command nvim; then
        log "Installing Neovim..."
        case "$(detect_os)" in
            ubuntu)
                # Try PPA first for latest version
                if ! grep -q "neovim-ppa/stable" /etc/apt/sources.list.d/* 2>/dev/null; then
                    sudo add-apt-repository ppa:neovim-ppa/stable -y >/dev/null 2>&1
                    sudo apt update -qq
                fi
                install_with_package_manager neovim
                ;;
            fedora)
                install_with_package_manager neovim
                ;;
            arch)
                install_with_package_manager neovim
                ;;
            macos)
                install_with_package_manager neovim
                ;;
            *)
                # Fallback: AppImage
                log "Using Neovim AppImage fallback..."
                mkdir -p "$HOME/.local/bin"
                curl -sL https://github.com/neovim/neovim/releases/latest/download/nvim.appimage -o "$HOME/.local/bin/nvim"
                chmod +x "$HOME/.local/bin/nvim"
                ;;
        esac
        
        if check_command nvim; then
            success "Neovim installed: $(nvim --version | head -1)"
        else
            error "Neovim installation failed"
            return 1
        fi
    else
        log "Neovim already available: $(nvim --version | head -1)"
    fi
}

# ===============================
# üõ†Ô∏è ESSENTIAL TOOLS
# ===============================

install_essential_tools() {
    log "Installing essential tools..."
    
    # Core system tools
    local core_tools=()
    case "$(detect_os)" in
        ubuntu)
            core_tools=("git" "curl" "wget" "zsh" "tmux" "build-essential" "software-properties-common")
            ;;
        fedora)
            core_tools=("git" "curl" "wget" "zsh" "tmux" "gcc" "gcc-c++" "make")
            ;;
        arch)
            core_tools=("git" "curl" "wget" "zsh" "tmux" "base-devel")
            ;;
        macos)
            core_tools=("git" "curl" "wget" "zsh" "tmux")
            ;;
    esac
    
    for tool in "${core_tools[@]}"; do
        if ! check_command "$tool"; then
            install_with_package_manager "$tool"
        fi
    done
}

install_modern_cli_tools() {
    log "Installing modern CLI tools..."
    
    # Package manager versions first
    case "$(detect_os)" in
        ubuntu)
            install_with_package_manager ripgrep
            install_with_package_manager fd-find
            # Ubuntu specific: fd is named fdfind
            if check_command fdfind && ! check_command fd; then
                mkdir -p "$HOME/.local/bin"
                ln -sf "$(which fdfind)" "$HOME/.local/bin/fd"
            fi
            ;;
        fedora)
            install_with_package_manager ripgrep
            install_with_package_manager fd-find
            ;;
        arch)
            install_with_package_manager ripgrep
            install_with_package_manager fd
            install_with_package_manager exa
            install_with_package_manager bat
            install_with_package_manager dust
            ;;
        macos)
            install_with_package_manager ripgrep
            install_with_package_manager fd
            install_with_package_manager exa
            install_with_package_manager bat
            install_with_package_manager dust
            ;;
    esac
    
    # Rust-based tools (if Rust is available)
    if check_command cargo; then
        install_rust_tool exa
        install_rust_tool bat
        install_rust_tool dust du-dust
        install_rust_tool btop
    fi
    
    # Special tools
    install_fzf
    install_zoxide
}

install_fzf() {
    if ! check_command fzf; then
        log "Installing fzf..."
        if [[ ! -d "$HOME/.fzf" ]]; then
            git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"
        fi
        "$HOME/.fzf/install" --all --no-bash --no-fish >/dev/null 2>&1
        success "fzf installed"
    else
        log "fzf already available"
    fi
}

install_zoxide() {
    if ! check_command zoxide; then
        log "Installing zoxide..."
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
        success "zoxide installed"
    else
        log "zoxide already available"
    fi
}

# ===============================
# üêö SHELL SETUP
# ===============================

setup_zsh_plugins() {
    log "Setting up ZSH plugins..."
    
    # Syntax highlighting
    if [[ ! -d "$HOME/.zsh-syntax-highlighting" ]]; then
        log "Installing zsh-syntax-highlighting..."
        git clone --depth 1 https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.zsh-syntax-highlighting"
    fi
    
    # Autosuggestions
    if [[ ! -d "$HOME/.zsh-autosuggestions" ]]; then
        log "Installing zsh-autosuggestions..."
        git clone --depth 1 https://github.com/zsh-users/zsh-autosuggestions "$HOME/.zsh-autosuggestions"
    fi
    
    success "ZSH plugins ready"
}

setup_tmux_plugins() {
    if ! check_command tmux; then
        install_with_package_manager tmux
    fi
    
    # TPM (Tmux Plugin Manager)
    if [[ ! -d "$HOME/.tmux/plugins/tpm" ]]; then
        log "Installing TPM..."
        git clone --depth 1 https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
        success "TPM installed"
    else
        log "TPM already available"
    fi
}

# ===============================
# üîç DEPENDENCY CHECK & REPORT
# ===============================

check_dependencies() {
    echo -e "${CYAN}üîç MINI SWEET HOME - DEPENDENCY STATUS${NC}"
    echo "=================================="
    
    # Core tools
    echo -e "\n${PURPLE}üì¶ Core Tools:${NC}"
    local core=("git" "curl" "wget" "zsh" "tmux")
    for tool in "${core[@]}"; do
        if check_command "$tool"; then
            echo -e "  ‚úÖ $tool"
        else
            echo -e "  ‚ùå $tool ${YELLOW}(missing)${NC}"
        fi
    done
    
    # Editors
    echo -e "\n${PURPLE}üìù Editors:${NC}"
    if check_command nvim; then
        echo -e "  ‚úÖ neovim $(nvim --version | head -1 | cut -d' ' -f2)"
    else
        echo -e "  ‚ùå neovim ${YELLOW}(missing)${NC}"
    fi
    
    # Modern CLI tools
    echo -e "\n${PURPLE}‚ö° Modern CLI Tools:${NC}"
    local modern=("exa:ls alternative" "bat:cat alternative" "fd:find alternative" "rg:grep alternative" "dust:du alternative" "btop:top alternative" "fzf:fuzzy finder" "zoxide:cd alternative")
    for item in "${modern[@]}"; do
        local tool="${item%%:*}"
        local desc="${item#*:}"
        if check_command "$tool"; then
            echo -e "  ‚úÖ $tool ${CYAN}($desc)${NC}"
        else
            echo -e "  ‚ö†Ô∏è  $tool ${YELLOW}($desc)${NC}"
        fi
    done
    
    # Development tools
    echo -e "\n${PURPLE}üõ†Ô∏è Development:${NC}"
    
    # Check Rust with PATH update
    if check_command cargo; then
        echo -e "  ‚úÖ rust $(rustc --version | cut -d' ' -f2)"
    elif [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env" 2>/dev/null || true
        if check_command cargo; then
            echo -e "  ‚úÖ rust $(rustc --version | cut -d' ' -f2) ${CYAN}(PATH updated)${NC}"
        else
            echo -e "  ‚ö†Ô∏è  rust ${YELLOW}(for modern tools)${NC}"
        fi
    else
        echo -e "  ‚ö†Ô∏è  rust ${YELLOW}(for modern tools)${NC}"
    fi
    
    # Check Go with PATH update
    if check_command go; then
        echo -e "  ‚úÖ go $(go version | cut -d' ' -f3)"
    elif [[ -d "/usr/local/go/bin" ]]; then
        export PATH=$PATH:/usr/local/go/bin
        if check_command go; then
            echo -e "  ‚úÖ go $(go version | cut -d' ' -f3) ${CYAN}(PATH updated)${NC}"
        else
            echo -e "  ‚ö†Ô∏è  go ${YELLOW}(optional)${NC}"
        fi
    else
        echo -e "  ‚ö†Ô∏è  go ${YELLOW}(optional)${NC}"
    fi
    
    # Check Node.js
    if check_command node; then
        echo -e "  ‚úÖ node.js $(node --version)"
    elif [[ -d "$HOME/.nvm" ]]; then
        # Try to load NVM
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh" 2>/dev/null || true
        if check_command node; then
            echo -e "  ‚úÖ node.js $(node --version) ${CYAN}(NVM loaded)${NC}"
        else
            echo -e "  ‚ö†Ô∏è  node.js ${YELLOW}(optional)${NC}"
        fi
    else
        echo -e "  ‚ö†Ô∏è  node.js ${YELLOW}(optional)${NC}"
    fi
    
    # Check Python
    if check_command python3; then
        echo -e "  ‚úÖ python $(python3 --version | cut -d' ' -f2)"
    elif check_command python; then
        echo -e "  ‚úÖ python $(python --version | cut -d' ' -f2)"
    else
        echo -e "  ‚ö†Ô∏è  python ${YELLOW}(optional)${NC}"
    fi
    
    # Check Java
    if check_command java; then
        local java_version=$(java -version 2>&1 | head -1 | cut -d'"' -f2)
        echo -e "  ‚úÖ java $java_version"
    elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]]; then
        export PATH=$JAVA_HOME/bin:$PATH
        if check_command java; then
            local java_version=$(java -version 2>&1 | head -1 | cut -d'"' -f2)
            echo -e "  ‚úÖ java $java_version ${CYAN}(JAVA_HOME)${NC}"
        else
            echo -e "  ‚ö†Ô∏è  java ${YELLOW}(optional)${NC}"
        fi
    else
        echo -e "  ‚ö†Ô∏è  java ${YELLOW}(optional)${NC}"
    fi
    
    # Check Docker
    if check_command docker; then
        local docker_version=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        echo -e "  ‚úÖ docker $docker_version"
    else
        echo -e "  ‚ö†Ô∏è  docker ${YELLOW}(optional)${NC}"
    fi
    
    # Shell plugins
    echo -e "\n${PURPLE}üêö Shell Plugins:${NC}"
    if [[ -d "$HOME/.zsh-syntax-highlighting" ]]; then
        echo -e "  ‚úÖ zsh-syntax-highlighting"
    else
        echo -e "  ‚ùå zsh-syntax-highlighting"
    fi
    
    if [[ -d "$HOME/.zsh-autosuggestions" ]]; then
        echo -e "  ‚úÖ zsh-autosuggestions"
    else
        echo -e "  ‚ùå zsh-autosuggestions"
    fi
    
    if [[ -d "$HOME/.tmux/plugins/tpm" ]]; then
        echo -e "  ‚úÖ tmux-plugin-manager"
    else
        echo -e "  ‚ùå tmux-plugin-manager"
    fi
    
    echo -e "\n${GREEN}üí° Tip: Run '$0 install-all' to install missing tools${NC}"
}

# ===============================
# üêπ NODE.JS INSTALLATION
# ===============================

install_nodejs() {
    if ! check_command node; then
        log "Installing Node.js..."
        # Try package manager first
        case "$(detect_os)" in
            ubuntu)
                # Install Node.js LTS via NodeSource
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                install_with_package_manager nodejs
                ;;
            fedora)
                install_with_package_manager nodejs
                install_with_package_manager npm
                ;;
            arch)
                install_with_package_manager nodejs
                install_with_package_manager npm
                ;;
            macos)
                install_with_package_manager node
                ;;
            *)
                # Fallback: NVM installation
                log "Using NVM fallback..."
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
                export NVM_DIR="$HOME/.nvm"
                [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
                nvm install --lts
                nvm use --lts
                ;;
        esac
        
        if check_command node; then
            success "Node.js installed: $(node --version)"
        else
            error "Node.js installation failed"
            return 1
        fi
    else
        log "Node.js already available: $(node --version)"
    fi
}

# ===============================
# üêç PYTHON INSTALLATION
# ===============================

install_python() {
    if ! check_command python3 && ! check_command python; then
        log "Installing Python..."
        case "$(detect_os)" in
            ubuntu)
                install_with_package_manager python3
                install_with_package_manager python3-pip
                ;;
            fedora)
                install_with_package_manager python3
                install_with_package_manager python3-pip
                ;;
            arch)
                install_with_package_manager python
                install_with_package_manager python-pip
                ;;
            macos)
                install_with_package_manager python3
                ;;
        esac
        
        if check_command python3 || check_command python; then
            success "Python installed"
        else
            error "Python installation failed"
            return 1
        fi
    else
        log "Python already available"
    fi
}

# ===============================
# üê≥ DOCKER INSTALLATION
# ===============================

install_docker() {
    if ! check_command docker; then
        log "Installing Docker..."
        case "$(detect_os)" in
            ubuntu)
                # Official Docker installation
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt update
                install_with_package_manager docker-ce docker-ce-cli containerd.io
                sudo usermod -aG docker $USER
                ;;
            fedora)
                install_with_package_manager docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            arch)
                install_with_package_manager docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            macos)
                warn "Please install Docker Desktop for Mac manually"
                return 1
                ;;
        esac
        
        if check_command docker; then
            success "Docker installed (restart session for group changes)"
        else
            error "Docker installation failed"
            return 1
        fi
    else
        log "Docker already available"
    fi
}

# ===============================
# üöÄ MAIN COMMANDS
# ===============================

install_all() {
    log "Installing all dependencies..."
    
    install_essential_tools
    install_rust
    install_go
    install_neovim
    install_modern_cli_tools
    setup_zsh_plugins
    setup_tmux_plugins
    
    success "All dependencies installed!"
}

install_missing() {
    log "Installing only missing dependencies..."
    
    # Check and install only missing tools
    if ! check_command cargo; then install_rust; fi
    if ! check_command go; then install_go; fi
    if ! check_command nvim; then install_neovim; fi
    
    # Modern tools
    install_rust_tool exa
    install_rust_tool bat
    install_rust_tool dust du-dust
    install_rust_tool btop
    
    if ! check_command fzf; then install_fzf; fi
    if ! check_command zoxide; then install_zoxide; fi
    
    setup_zsh_plugins
    setup_tmux_plugins
    
    success "Missing dependencies installed!"
}

# ===============================
# üéØ MAIN SCRIPT
# ===============================

main() {
    case "${1:-check}" in
        check|status)
            check_dependencies
            ;;
        install-all)
            install_all
            ;;
        install-missing)
            install_missing
            ;;
        install-rust)
            install_rust
            ;;
        install-go)
            install_go
            ;;
        install-nodejs)
            install_nodejs
            ;;
        install-python)
            install_python
            ;;
        install-docker)
            install_docker
            ;;
        install-neovim)
            install_neovim
            ;;
        install-modern)
            install_modern_cli_tools
            ;;
        help)
            echo "üè† Mini Sweet Home - Dependency Manager"
            echo
            echo "Usage: $0 [command]"
            echo
            echo "Commands:"
            echo "  check          Show dependency status (default)"
            echo "  install-all    Install all dependencies"
            echo "  install-missing Install only missing dependencies"
            echo
            echo "Development Toolchains:"
            echo "  install-rust   Install Rust toolchain"
            echo "  install-go     Install Go toolchain"
            echo "  install-nodejs Install Node.js"
            echo "  install-python Install Python"
            echo "  install-docker Install Docker"
            echo
            echo "Tools:"
            echo "  install-neovim Install Neovim"
            echo "  install-modern Install modern CLI tools"
            echo
            echo "  help           Show this help"
            ;;
        *)
            error "Unknown command: $1"
            echo "Run '$0 help' for usage information"
            exit 1
            ;;
    esac
}

main "$@"
