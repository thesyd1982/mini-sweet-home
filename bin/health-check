#!/bin/bash

# ===============================
# üîÑ MINI SWEET HOME - HEALTH CHECK
# ===============================

# V√©rification continue de la sant√© du syst√®me
# Usage: ./bin/health-check [--watch]

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

health_check() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}üîÑ Health Check - $timestamp${NC}"
    
    local issues=0
    
    # 1. V√©rifier les liens symboliques
    echo -n "üîó Symlinks... "
    if [[ -L ~/.zshrc && -L ~/.tmux.conf && -L ~/.gitconfig && -L ~/.config/nvim ]]; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${RED}‚ùå${NC}"
        ((issues++))
    fi
    
    # 2. V√©rifier les performances ZSH
    echo -n "‚ö° ZSH performance... "
    if command -v zsh >/dev/null 2>&1; then
        local zsh_time=$(timeout 5 bash -c 'time zsh -i -c exit' 2>&1 | grep real | awk '{print $2}' | sed 's/[^0-9.]//g' || echo "999")
        if (( $(echo "$zsh_time < 1.0" | bc -l 2>/dev/null || echo 0) )); then
            echo -e "${GREEN}‚úÖ (${zsh_time}s)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è (${zsh_time}s)${NC}"
        fi
    else
        echo -e "${RED}‚ùå${NC}"
        ((issues++))
    fi
    
    # 3. V√©rifier les outils essentiels
    echo -n "üõ†Ô∏è Essential tools... "
    local missing_tools=0
    for tool in git curl wget; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            ((missing_tools++))
        fi
    done
    
    if [[ $missing_tools -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è ($missing_tools missing)${NC}"
    fi
    
    # 4. V√©rifier l'espace disque
    echo -n "üíæ Disk space... "
    local disk_usage=$(df ~ | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ $disk_usage -lt 90 ]]; then
        echo -e "${GREEN}‚úÖ (${disk_usage}% used)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è (${disk_usage}% used)${NC}"
    fi
    
    # 5. V√©rifier les processus suspects
    echo -n "üîç Process health... "
    local zombie_count=$(ps aux | awk '$8 ~ /^Z/ { count++ } END { print count+0 }')
    if [[ $zombie_count -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è ($zombie_count zombies)${NC}"
    fi
    
    # R√©sum√©
    if [[ $issues -eq 0 ]]; then
        echo -e "${GREEN}üéâ System healthy!${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è $issues issue(s) detected${NC}"
        return 1
    fi
}

# Mode watch
if [[ "$1" == "--watch" ]]; then
    echo "üîÑ Starting continuous health monitoring (Ctrl+C to stop)..."
    echo "Checking every 60 seconds..."
    echo ""
    
    while true; do
        health_check
        echo ""
        sleep 60
    done
else
    health_check
fi
