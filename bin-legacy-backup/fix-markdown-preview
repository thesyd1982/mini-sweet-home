#!/bin/bash

# Script pour corriger MarkdownPreview dans WSL
# Usage: ./fix-markdown-preview

set -euo pipefail

echo "🔧 Correction de MarkdownPreview pour WSL..."

# Vérifier si nous sommes dans WSL
if ! grep -qi microsoft /proc/version 2>/dev/null; then
    echo "❌ Ce script est conçu pour WSL uniquement"
    exit 1
fi

# Installer wslu si nécessaire (contient wslview)
if ! command -v wslview &> /dev/null; then
    echo "📦 Installation de wslu (contient wslview)..."
    
    # Détecter la distribution
    if command -v apt &> /dev/null; then
        # Ubuntu/Debian
        sudo apt update
        sudo apt install -y wslu
    elif command -v yum &> /dev/null; then
        # RHEL/CentOS
        sudo yum install -y wslu
    elif command -v pacman &> /dev/null; then
        # Arch
        sudo pacman -S wslu
    else
        echo "❌ Distribution non supportée pour l'installation automatique de wslu"
        echo "💡 Installez manuellement wslu pour votre distribution"
        exit 1
    fi
else
    echo "✅ wslview est déjà installé"
fi

# Vérifier que wslview fonctionne
if wslview --help &> /dev/null; then
    echo "✅ wslview fonctionne correctement"
else
    echo "❌ wslview ne fonctionne pas correctement"
    exit 1
fi

# Créer une configuration optimisée pour WSL
echo "📝 Création de la configuration optimisée..."

# Backup de la configuration actuelle
CONFIG_FILE="$HOME/mini-sweet-home/configs/nvim/lua/plugins/markdown.lua"
if [[ -f "$CONFIG_FILE" ]]; then
    cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    echo "✅ Backup créé: $CONFIG_FILE.backup.*"
fi

# Écrire la configuration optimisée
cat > "$CONFIG_FILE" << 'EOF'
return {
	"iamcco/markdown-preview.nvim",
	build = "cd app && npm install",
	cmd = { "MarkdownPreview", "MarkdownPreviewStop", "MarkdownPreviewToggle" },
	ft = { "markdown" },
	config = function()
		-- Configuration optimisée pour WSL
		vim.g.mkdp_auto_start = 0
		vim.g.mkdp_auto_close = 1
		
		-- Utilise wslview pour ouvrir dans le navigateur Windows
		vim.g.mkdp_browser = 'wslview'
		
		-- Configuration réseau
		vim.g.mkdp_open_to_the_world = 1
		vim.g.mkdp_open_ip = '127.0.0.1'
		vim.g.mkdp_port = '8080'
		vim.g.mkdp_echo_preview_url = 1
		
		-- Options de prévisualisation
		vim.g.mkdp_preview_options = {
			mkit = {},
			katex = {},
			uml = {},
			maid = {},
			disable_sync_scroll = 0,
			sync_scroll_type = 'middle',
			hide_yaml_meta = 1,
			content_editable = false,
			disable_filename = 0
		}
		
		-- Theme CSS personnalisé (optionnel)
		vim.g.mkdp_markdown_css = ''
		vim.g.mkdp_highlight_css = ''
		
		-- Page template personnalisée (optionnel)
		vim.g.mkdp_page_title = '「${name}」'
	end,
}
EOF

echo "✅ Configuration mise à jour avec wslview"

# Instructions pour l'utilisateur
echo ""
echo "🎉 Configuration terminée !"
echo ""
echo "📝 Instructions d'utilisation :"
echo "   1. Redémarrez Neovim"
echo "   2. Ouvrez un fichier .md"
echo "   3. Utilisez :MarkdownPreview pour démarrer"
echo "   4. Utilisez :MarkdownPreviewStop pour arrêter"
echo "   5. Utilisez :MarkdownPreviewToggle pour basculer"
echo ""
echo "🔗 L'URL sera affichée dans Neovim et le navigateur s'ouvrira automatiquement"
echo ""
echo "💡 Si vous préférez un navigateur spécifique, modifiez mkdp_browser dans :"
echo "   $CONFIG_FILE"
echo ""
echo "   Exemples :"
echo "   - Chrome: vim.g.mkdp_browser = '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'"
echo "   - Edge: vim.g.mkdp_browser = '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'"
echo "   - Firefox: vim.g.mkdp_browser = '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'"

exit 0
