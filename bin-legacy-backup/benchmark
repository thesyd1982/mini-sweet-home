#!/bin/bash

# ===============================
# üè† MINI SWEET HOME BENCHMARK
# ===============================

# Help option
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: bench [options]"
    echo "  -h, --help    Show this help"
    echo "  -q, --quiet   Quiet mode (scores only)"
    echo "  -f, --fast    Fast mode (fewer tests)"
    echo ""
    echo "Benchmark your dotfiles performance"
    exit 0
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

echo -e "${MAGENTA}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë          üöÄ DOTFILES BENCHMARK           ‚ïë"
echo "‚ïë              Rose Pine V4                ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Benchmark shell startup
echo -e "${CYAN}üêö Shell Startup Performance${NC}"
echo "Testing ZSH startup time..."

# Test multiple startups
total_time=0
runs=5

for i in $(seq 1 $runs); do
    start_time=$(date +%s%3N)
    zsh -i -c exit 2>/dev/null
    end_time=$(date +%s%3N)
    time_diff=$((end_time - start_time))
    total_time=$((total_time + time_diff))
    echo "  Run $i: ${time_diff}ms"
done

avg_time=$((total_time / runs))
echo -e "  ${GREEN}Average startup time: ${avg_time}ms${NC}"

if [[ $avg_time -lt 200 ]]; then
    echo -e "  ${GREEN}‚úÖ Excellent performance${NC}"
elif [[ $avg_time -lt 500 ]]; then
    echo -e "  ${YELLOW}‚ö†Ô∏è Good performance${NC}"
else
    echo -e "  ${RED}‚ùå Slow startup - check plugins${NC}"
fi

echo ""

# Benchmark tmux
echo -e "${CYAN}ü™ü Tmux Performance${NC}"
echo "Testing tmux session creation..."

start_time=$(date +%s%3N)
tmux new-session -d -s benchmark_test 2>/dev/null
tmux kill-session -t benchmark_test 2>/dev/null
end_time=$(date +%s%3N)
tmux_time=$((end_time - start_time))

echo -e "  Tmux session creation: ${tmux_time}ms"
if [[ $tmux_time -lt 100 ]]; then
    echo -e "  ${GREEN}‚úÖ Fast tmux startup${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Consider optimizing tmux config${NC}"
fi

echo ""

# Benchmark nvim
echo -e "${CYAN}üìù Neovim Performance${NC}"
echo "Testing Neovim startup..."

start_time=$(date +%s%3N)
nvim --headless -c "quit" 2>/dev/null
end_time=$(date +%s%3N)
nvim_time=$((end_time - start_time))

echo -e "  Neovim startup: ${nvim_time}ms"
if [[ $nvim_time -lt 500 ]]; then
    echo -e "  ${GREEN}‚úÖ Fast Neovim startup${NC}"
elif [[ $nvim_time -lt 1000 ]]; then
    echo -e "  ${YELLOW}‚ö†Ô∏è Moderate Neovim startup${NC}"
else
    echo -e "  ${RED}‚ùå Slow Neovim - check plugins${NC}"
fi

echo ""

# System resource usage
echo -e "${CYAN}üíª System Resources${NC}"

# Memory usage
mem_used=$(free -m | awk 'NR==2{printf "%.1f", $3*100/$2}')
echo -e "  Memory usage: ${mem_used}%"

# Disk usage for dotfiles
dotfiles_size=$(du -sh ~/dotfiles 2>/dev/null | cut -f1)
echo -e "  Dotfiles size: ${dotfiles_size}"

# Check for large caches
cache_size=$(du -sh ~/.cache 2>/dev/null | cut -f1)
echo -e "  Cache size: ${cache_size}"

echo ""

# Tool availability
echo -e "${CYAN}üõ†Ô∏è Tools Availability${NC}"

tools=("exa" "bat" "dust" "fd" "rg" "btop" "zoxide")
available=0

for tool in "${tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ $tool${NC}"
        ((available++))
    else
        echo -e "  ${RED}‚ùå $tool${NC}"
    fi
done

echo -e "  Tools available: $available/${#tools[@]}"

echo ""

# Git performance
echo -e "${CYAN}üêô Git Performance${NC}"
if git rev-parse --git-dir >/dev/null 2>&1; then
    start_time=$(date +%s%3N)
    git status >/dev/null 2>&1
    end_time=$(date +%s%3N)
    git_time=$((end_time - start_time))
    
    echo -e "  Git status: ${git_time}ms"
    if [[ $git_time -lt 50 ]]; then
        echo -e "  ${GREEN}‚úÖ Fast git operations${NC}"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è Consider git optimization${NC}"
    fi
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Not in a git repository${NC}"
fi

echo ""

# Overall score
echo -e "${MAGENTA}üìä Performance Score${NC}"

score=0
max_score=100

# Shell startup (30 points)
if [[ $avg_time -lt 200 ]]; then
    score=$((score + 30))
elif [[ $avg_time -lt 500 ]]; then
    score=$((score + 20))
else
    score=$((score + 10))
fi

# Tmux (20 points)
if [[ $tmux_time -lt 100 ]]; then
    score=$((score + 20))
else
    score=$((score + 10))
fi

# Neovim (30 points)
if [[ $nvim_time -lt 500 ]]; then
    score=$((score + 30))
elif [[ $nvim_time -lt 1000 ]]; then
    score=$((score + 20))
else
    score=$((score + 10))
fi

# Tools (20 points)
tools_score=$((available * 20 / ${#tools[@]}))
score=$((score + tools_score))

echo -e "  ${WHITE}Overall Performance: $score/$max_score${NC}"

if [[ $score -ge 80 ]]; then
    echo -e "  ${GREEN}üéâ Excellent configuration!${NC}"
elif [[ $score -ge 60 ]]; then
    echo -e "  ${YELLOW}‚ö° Good configuration${NC}"
else
    echo -e "  ${RED}üîß Consider optimization${NC}"
fi

echo ""
echo -e "${BLUE}üí° Tips for optimization:${NC}"
echo "  ‚Ä¢ Use 'hyperfine' for detailed benchmarking"
echo "  ‚Ä¢ Check plugin load times with 'nvim --startuptime'"
echo "  ‚Ä¢ Profile ZSH with 'zprof'"
echo "  ‚Ä¢ Monitor with 'btop' or 'htop'"
