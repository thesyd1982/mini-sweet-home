#!/bin/bash

# ==========================================
# ü©∫ DIAGNOSTIC ENVIRONNEMENT RUST
# ==========================================
# Usage: ./rust-doctor
# Description: Diagnostic complet de l'environnement Rust

set -euo pipefail

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
warning() { echo -e "${YELLOW}[‚ö†]${NC} $1"; }
error() { echo -e "${RED}[‚úó]${NC} $1"; }
recommend() { echo -e "${CYAN}[üíä]${NC} $1"; }

echo "ü©∫ Diagnostic de l'environnement Rust"
echo "===================================="
echo ""

# V√©rifications de base
log "V√©rification de l'installation Rust..."

if command -v rustc >/dev/null 2>&1; then
    success "rustc install√©: $(rustc --version)"
else
    error "rustc non trouv√©"
    recommend "Installez Rust avec: make rust-full"
fi

if command -v cargo >/dev/null 2>&1; then
    success "cargo install√©: $(cargo --version)"
else
    error "cargo non trouv√©"
    recommend "Installez Rust avec: make rust-full"
fi

if command -v rustup >/dev/null 2>&1; then
    success "rustup install√©: $(rustup --version | head -1)"
else
    error "rustup non trouv√©"
    recommend "Installez Rust avec: make rust-full"
fi

echo ""

# V√©rification des outils Rust
log "V√©rification des outils Rust modernes..."

tools=(
    "dust:du-dust:Analyseur d'espace disque"
    "rg:ripgrep:Recherche rapide"
    "fd:fd-find:Alternative √† find"
    "bat:bat:Cat avec coloration"
    "exa:exa:Ls moderne"
    "zoxide:zoxide:CD intelligent"
    "starship:starship:Prompt moderne"
)

for tool_info in "${tools[@]}"; do
    IFS=':' read -r cmd package desc <<< "$tool_info"
    if command -v "$cmd" >/dev/null 2>&1; then
        success "$desc ($cmd) install√©"
    else
        warning "$desc ($cmd) non trouv√©"
        recommend "Installez avec: cargo install $package"
    fi
done

echo ""

# V√©rification de l'environnement
log "V√©rification de l'environnement..."

if [[ ":$PATH:" == *":$HOME/.cargo/bin:"* ]]; then
    success "~/.cargo/bin dans le PATH"
else
    warning "~/.cargo/bin pas dans le PATH"
    recommend "Ajoutez 'source ~/.cargo/env' √† votre ~/.zshrc ou ~/.bashrc"
fi

if [[ -f "$HOME/.cargo/env" ]]; then
    success "Fichier d'environnement Cargo pr√©sent"
else
    warning "Fichier ~/.cargo/env manquant"
    recommend "R√©installez Rust avec rustup"
fi

if [[ -f "$HOME/.cargo/config.toml" ]]; then
    success "Configuration Cargo personnalis√©e trouv√©e"
else
    warning "Pas de configuration Cargo personnalis√©e"
    recommend "Ex√©cutez: make rust-full pour une configuration optimis√©e"
fi

echo ""

# V√©rifications sp√©cifiques WSL
if grep -qi microsoft /proc/version 2>/dev/null; then
    log "Environnement WSL d√©tect√© - V√©rifications sp√©cifiques..."
    
    if [[ -f "$HOME/.cargo/config.toml" ]] && grep -q "target-dir" "$HOME/.cargo/config.toml"; then
        success "Configuration WSL optimis√©e (target-dir configur√©)"
    else
        warning "Configuration WSL non optimis√©e"
        recommend "Configurez target-dir pour de meilleures performances"
    fi
    
    # V√©rifier Windows Defender exclusions
    if command -v powershell.exe >/dev/null 2>&1; then
        log "V√©rification des exclusions Windows Defender..."
        # Note: Cette v√©rification n√©cessiterait des droits admin
        warning "V√©rifiez manuellement les exclusions Windows Defender pour ~/.cargo"
        recommend "Ajoutez ~/.cargo aux exclusions pour de meilleures performances"
    fi
fi

echo ""

# V√©rification des performances
log "Test de performance Cargo..."

if command -v cargo >/dev/null 2>&1; then
    # Test simple de compilation
    temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    cargo init --name test-perf --quiet 2>/dev/null || true
    
    if [[ -f "Cargo.toml" ]]; then
        echo "Temps de compilation d'un projet Hello World :"
        time cargo build --quiet 2>/dev/null || warning "√âchec du test de compilation"
    fi
    
    cd - >/dev/null
    rm -rf "$temp_dir"
fi

echo ""

# Recommandations g√©n√©rales
log "Recommandations g√©n√©rales..."

if ! command -v dust >/dev/null 2>&1; then
    recommend "Installez dust pour un analyseur d'espace disque moderne: make dust"
fi

if ! command -v rg >/dev/null 2>&1; then
    recommend "Installez ripgrep pour des recherches ultra-rapides: cargo install ripgrep"
fi

if ! command -v fd >/dev/null 2>&1; then
    recommend "Installez fd pour remplacer find: cargo install fd-find"
fi

# V√©rification des mises √† jour
if command -v cargo >/dev/null 2>&1; then
    if ! command -v cargo-install-update >/dev/null 2>&1; then
        recommend "Installez cargo-update pour maintenir vos outils: cargo install cargo-update"
    else
        log "V√©rification des mises √† jour disponibles..."
        outdated=$(cargo install-update --list 2>/dev/null | grep -c "^[^[:space:]]" || echo "0")
        if [[ "$outdated" -gt 0 ]]; then
            warning "$outdated outils peuvent √™tre mis √† jour"
            recommend "Mettez √† jour avec: make rust-update"
        else
            success "Tous les outils Rust sont √† jour"
        fi
    fi
fi

echo ""

# R√©sum√© et score
log "R√©sum√© du diagnostic..."

score=0
total=10

command -v rustc >/dev/null 2>&1 && ((score++))
command -v cargo >/dev/null 2>&1 && ((score++))
command -v rustup >/dev/null 2>&1 && ((score++))
command -v dust >/dev/null 2>&1 && ((score++))
command -v rg >/dev/null 2>&1 && ((score++))
command -v fd >/dev/null 2>&1 && ((score++))
command -v bat >/dev/null 2>&1 && ((score++))
command -v exa >/dev/null 2>&1 && ((score++))
[[ ":$PATH:" == *":$HOME/.cargo/bin:"* ]] && ((score++))
[[ -f "$HOME/.cargo/config.toml" ]] && ((score++))

percentage=$((score * 100 / total))

echo ""
if [[ $percentage -ge 90 ]]; then
    success "üéâ Environnement Rust excellent ($score/$total - $percentage%)"
elif [[ $percentage -ge 70 ]]; then
    success "‚úÖ Environnement Rust bon ($score/$total - $percentage%)"
elif [[ $percentage -ge 50 ]]; then
    warning "‚ö†Ô∏è  Environnement Rust correct ($score/$total - $percentage%)"
else
    error "‚ùå Environnement Rust √† am√©liorer ($score/$total - $percentage%)"
fi

echo ""

if [[ $percentage -lt 90 ]]; then
    echo "üöÄ Actions recommand√©es pour am√©liorer votre environnement :"
    
    if [[ $score -lt 3 ]]; then
        echo "   1. Installation compl√®te: make rust-full"
    else
        echo "   1. Installation des outils manquants: make modern"
    fi
    
    echo "   2. Configuration optimis√©e: √âditez ~/.cargo/config.toml"
    echo "   3. Test des outils: make dust-demo"
    echo "   4. Mise √† jour r√©guli√®re: make rust-update"
fi

echo ""
echo "üìö Documentation compl√®te: ~/mini-sweet-home/docs/rust-installation-guide.md"
