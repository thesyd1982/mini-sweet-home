#!/bin/bash

# ===============================
# üß™ MINI SWEET HOME - TEST RUNNER (FIXED)
# ===============================

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Test counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
SKIPPED_TESTS=0

# Results arrays
declare -a FAILED_TEST_NAMES=()
declare -a PASSED_TEST_NAMES=()
declare -a SKIPPED_TEST_NAMES=()

# Logging functions
test_start() { 
    echo -e "${BLUE}[TEST]${NC} $1"
    ((TOTAL_TESTS++))
}

test_pass() { 
    echo -e "${GREEN}[PASS]${NC} $1"
    ((PASSED_TESTS++))
    PASSED_TEST_NAMES+=("$1")
}

test_fail() { 
    echo -e "${RED}[FAIL]${NC} $1"
    ((FAILED_TESTS++))
    FAILED_TEST_NAMES+=("$1")
}

test_skip() { 
    echo -e "${YELLOW}[SKIP]${NC} $1"
    ((SKIPPED_TESTS++))
    SKIPPED_TEST_NAMES+=("$1")
}

info() { echo -e "${CYAN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Banner
echo -e "${PURPLE}"
cat << "EOF"
üß™ MINI SWEET HOME - TEST RUNNER
================================
Comprehensive Testing Suite
EOF
echo -e "${NC}"

DOTFILES_DIR="$HOME/mini-sweet-home"

# Ensure we're in the right place
if [[ ! -d "$DOTFILES_DIR" ]]; then
    error "Mini Sweet Home not found at $DOTFILES_DIR"
    exit 1
fi

cd "$DOTFILES_DIR"

# ===============================
# PHASE FUNCTIONS
# ===============================

run_phase1_structure() {
    echo -e "\n${PURPLE}üèóÔ∏è PHASE 1: STRUCTURE & INTEGRITY${NC}"
    echo "=================================="
    
    test_start "Essential files exist"
    if [[ -f install && -f Makefile && -f README.md && -f .gitignore ]]; then
        test_pass "Essential files exist"
    else
        test_fail "Missing essential files"
    fi
    
    test_start "Directory structure"
    if [[ -d configs && -d bin && -d tools && -d tests ]]; then
        test_pass "Directory structure correct"
    else
        test_fail "Incorrect directory structure"
    fi
    
    test_start "Scripts are executable"
    local all_executable=true
    for script in install bin/dependency-manager bin/benchmark bin/verify; do
        if [[ ! -x "$script" ]]; then
            all_executable=false
            break
        fi
    done
    
    if $all_executable; then
        test_pass "All scripts executable"
    else
        test_fail "Some scripts not executable"
    fi
    
    test_start "ZSH config syntax"
    if zsh -n configs/shell/zsh/zshrc 2>/dev/null; then
        test_pass "ZSH config syntax valid"
    else
        test_fail "ZSH config syntax invalid"
    fi
    
    test_start "Tmux config syntax"
    if tmux -f configs/tmux/tmux.conf list-keys >/dev/null 2>&1; then
        test_pass "Tmux config syntax valid"
    else
        test_fail "Tmux config syntax invalid"
    fi
    
    test_start "Git config format"
    if git config -f configs/git/gitconfig --list >/dev/null 2>&1; then
        test_pass "Git config format valid"
    else
        test_fail "Git config format invalid"
    fi
}

run_phase2_installation() {
    echo -e "\n${PURPLE}üöÄ PHASE 2: INSTALLATION ROBUSTE${NC}"
    echo "=================================="
    
    local backup_dir="/tmp/mini-sweet-home-test-backup-$$"
    mkdir -p "$backup_dir"
    
    [[ -f ~/.zshrc ]] && cp ~/.zshrc "$backup_dir/"
    [[ -f ~/.tmux.conf ]] && cp ~/.tmux.conf "$backup_dir/"
    [[ -f ~/.gitconfig ]] && cp ~/.gitconfig "$backup_dir/"
    [[ -d ~/.config/nvim ]] && cp -r ~/.config/nvim "$backup_dir/"
    
    test_start "Quick installation"
    if timeout 60 make quick >/dev/null 2>&1; then
        test_pass "Quick installation successful"
    else
        test_fail "Quick installation failed"
    fi
    
    test_start "Symbolic links created"
    local links_ok=true
    for link in ~/.zshrc ~/.tmux.conf ~/.gitconfig ~/.config/nvim; do
        if [[ ! -L "$link" ]]; then
            links_ok=false
            break
        fi
    done
    
    if $links_ok; then
        test_pass "All symbolic links created"
    else
        test_fail "Some symbolic links missing"
    fi
    
    info "Restoring test backup..."
    [[ -f "$backup_dir/.zshrc" ]] && cp "$backup_dir/.zshrc" ~/
    [[ -f "$backup_dir/.tmux.conf" ]] && cp "$backup_dir/.tmux.conf" ~/
    [[ -f "$backup_dir/.gitconfig" ]] && cp "$backup_dir/.gitconfig" ~/
    [[ -d "$backup_dir/nvim" ]] && rm -rf ~/.config/nvim && cp -r "$backup_dir/nvim" ~/.config/
    rm -rf "$backup_dir"
}

run_phase3_fallbacks() {
    echo -e "\n${PURPLE}üîÑ PHASE 3: FALLBACKS INTELLIGENTS${NC}"
    echo "=================================="
    
    test_start "ls ‚Üí exa fallback detection"
    if command -v exa >/dev/null 2>&1; then
        test_pass "exa available for ls enhancement"
    else
        test_pass "ls fallback will be used (exa not available)"
    fi
    
    test_start "cat ‚Üí bat fallback detection"
    if command -v bat >/dev/null 2>&1; then
        test_pass "bat available for cat enhancement"
    elif command -v batcat >/dev/null 2>&1; then
        test_pass "batcat available for cat enhancement"
    else
        test_pass "cat fallback will be used (bat not available)"
    fi
    
    test_start "find ‚Üí fd fallback detection"
    if command -v fd >/dev/null 2>&1 || command -v fdfind >/dev/null 2>&1; then
        test_pass "fd/fdfind available for find enhancement"
    else
        test_pass "find fallback will be used (fd not available)"
    fi
    
    test_start "grep ‚Üí rg fallback detection"
    if command -v rg >/dev/null 2>&1; then
        test_pass "ripgrep available for grep enhancement"
    else
        test_pass "grep fallback will be used (ripgrep not available)"
    fi
    
    test_start "Editor cascade detection"
    if command -v nvim >/dev/null 2>&1; then
        test_pass "nvim available (optimal editor)"
    elif command -v vim >/dev/null 2>&1; then
        test_pass "vim available (good fallback)"
    elif command -v vi >/dev/null 2>&1; then
        test_pass "vi available (basic fallback)"
    else
        test_pass "nano fallback will be used"
    fi
}

run_phase4_dependencies() {
    echo -e "\n${PURPLE}üì¶ PHASE 4: DEPENDENCY MANAGEMENT${NC}"
    echo "=================================="
    
    test_start "Dependency manager executable"
    if [[ -x bin/dependency-manager ]]; then
        test_pass "Dependency manager is executable"
    else
        test_fail "Dependency manager not executable"
    fi
    
    test_start "Dependency status check"
    if ./bin/dependency-manager check >/dev/null 2>&1; then
        test_pass "Dependency status check works"
    else
        test_fail "Dependency status check failed"
    fi
    
    test_start "Multi-language detection"
    local output=$(./bin/dependency-manager check 2>/dev/null)
    local langs_detected=0
    if echo "$output" | grep -q "rust"; then ((langs_detected++)); fi
    if echo "$output" | grep -q "go"; then ((langs_detected++)); fi
    if echo "$output" | grep -q "node"; then ((langs_detected++)); fi
    if echo "$output" | grep -q "python"; then ((langs_detected++)); fi
    
    if [[ $langs_detected -ge 2 ]]; then
        test_pass "Multi-language detection works ($langs_detected languages)"
    else
        test_pass "Basic language detection works ($langs_detected languages)"
    fi
}

run_phase5_performance() {
    echo -e "\n${PURPLE}‚ö° PHASE 5: PERFORMANCE${NC}"
    echo "=================================="
    
    test_start "Benchmark script available"
    if [[ -x bin/benchmark ]]; then
        test_pass "Benchmark script is executable and available"
    else
        test_fail "Benchmark script not executable"
    fi
    
    test_start "ZSH availability"
    if command -v zsh >/dev/null 2>&1; then
        test_pass "ZSH is available"
    else
        test_fail "ZSH not available"
    fi
    
    test_start "Tmux availability" 
    if command -v tmux >/dev/null 2>&1; then
        test_pass "Tmux is available"
    else
        test_fail "Tmux not available"
    fi
    
    test_start "Neovim availability"
    if command -v nvim >/dev/null 2>&1; then
        test_pass "Neovim is available"
    else
        test_skip "Neovim not available"
    fi
}

run_phase6_maintenance() {
    echo -e "\n${PURPLE}üõ†Ô∏è PHASE 6: MAKEFILE & MAINTENANCE${NC}"
    echo "=================================="
    
    test_start "Makefile exists and is valid"
    if [[ -f Makefile ]] && make -n help >/dev/null 2>&1; then
        test_pass "Makefile is valid"
    else
        test_fail "Makefile invalid or missing"
    fi
    
    local make_targets=("help" "check" "status")
    for target in "${make_targets[@]}"; do
        test_start "make $target works"
        if timeout 10 make -n "$target" >/dev/null 2>&1; then
            test_pass "make $target works"
        else
            test_fail "make $target failed"
        fi
    done
    
    test_start "Verification script"
    if [[ -x bin/verify ]]; then
        test_pass "Verification script is executable"
    else
        test_fail "Verification script not executable"
    fi
}

generate_final_report() {
    echo -e "\n${PURPLE}üìä FINAL TEST REPORT${NC}"
    echo "===================="
    
    local success_rate=0
    if [[ $TOTAL_TESTS -gt 0 ]]; then
        success_rate=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
    fi
    
    echo -e "\n${CYAN}üìà TEST STATISTICS${NC}"
    echo "Total Tests: $TOTAL_TESTS"
    echo -e "${GREEN}Passed: $PASSED_TESTS${NC}"
    echo -e "${RED}Failed: $FAILED_TESTS${NC}"
    echo -e "${YELLOW}Skipped: $SKIPPED_TESTS${NC}"
    echo -e "${WHITE}Success Rate: $success_rate%${NC}"
    
    if [[ ${#FAILED_TEST_NAMES[@]} -gt 0 ]]; then
        echo -e "\n${RED}‚ùå FAILED TESTS:${NC}"
        for test in "${FAILED_TEST_NAMES[@]}"; do
            echo "  - $test"
        done
    fi
    
    if [[ ${#SKIPPED_TEST_NAMES[@]} -gt 0 ]]; then
        echo -e "\n${YELLOW}‚è≠Ô∏è SKIPPED TESTS:${NC}"
        for test in "${SKIPPED_TEST_NAMES[@]}"; do
            echo "  - $test"
        done
    fi
    
    echo -e "\n${CYAN}üéØ FINAL VERDICT${NC}"
    if [[ $success_rate -ge 95 ]]; then
        echo -e "${GREEN}üèÜ EXCELLENT! Mini Sweet Home is rock solid!${NC}"
        echo -e "${GREEN}‚úÖ Ready for production use${NC}"
    elif [[ $success_rate -ge 85 ]]; then
        echo -e "${YELLOW}ü•à GOOD! Mini Sweet Home works well${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è Minor issues but generally functional${NC}"
    else
        echo -e "${YELLOW}ü•â ACCEPTABLE! Mini Sweet Home has some issues${NC}"
        echo -e "${YELLOW}üîß Needs attention on failed tests${NC}"
    fi
    
    echo -e "\n${CYAN}üí° RECOMMENDATIONS${NC}"
    if [[ $FAILED_TESTS -gt 0 ]]; then
        echo "1. Review and fix failed tests"
        echo "2. Run './bin/dependency-manager install-missing'"
        echo "3. Run 'make doctor' for diagnostic suggestions"
    fi
    
    echo "6. Run 'make benchmark' for performance validation"
    echo "7. Regular maintenance with 'make status'"
    
    return $FAILED_TESTS
}

# ===============================
# üöÄ MAIN EXECUTION
# ===============================

main() {
    local phases_to_run="$1"
    
    case "$phases_to_run" in
        "quick"|"fast")
            info "Running quick test suite..."
            run_phase1_structure
            run_phase3_fallbacks
            run_phase4_dependencies
            ;;
        "standard")
            info "Running standard test suite..."
            run_phase1_structure
            run_phase2_installation
            run_phase3_fallbacks
            run_phase4_dependencies
            run_phase5_performance
            run_phase6_maintenance
            ;;
        "minimal")
            info "Running minimal test suite..."
            run_phase1_structure
            run_phase4_dependencies
            ;;
        "help")
            echo "Usage: $0 [test_level]"
            echo ""
            echo "Test Levels:"
            echo "  minimal   - Essential tests only (~2 min)"
            echo "  quick     - Quick tests (~5 min)"
            echo "  standard  - Standard test suite (~10 min) [default]"
            echo "  help      - Show this help"
            exit 0
            ;;
        *)
            info "Running standard test suite..."
            run_phase1_structure
            run_phase2_installation
            run_phase3_fallbacks
            run_phase4_dependencies
            run_phase5_performance
            run_phase6_maintenance
            ;;
    esac
    
    generate_final_report
    
    if [[ $FAILED_TESTS -eq 0 ]]; then
        exit 0
    else
        exit 1
    fi
}

main "$@"
