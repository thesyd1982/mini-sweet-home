#!/bin/bash

# ==========================================
# 🏠 MINI SWEET HOME - SETUP ENHANCED v2.1.1
# ==========================================
# Usage: ./setup-enhanced [minimal|modern|developer|server]

set -euo pipefail

readonly SCRIPT_VERSION="2.1.1"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Couleurs
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly RESET='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${RESET} $1"; }
log_success() { echo -e "${GREEN}[✓]${RESET} $1"; }
log_warning() { echo -e "${YELLOW}[⚠]${RESET} $1"; }
log_error() { echo -e "${RED}[✗]${RESET} $1"; }
log_header() { echo -e "${CYAN}${BOLD}$1${RESET}"; }

command_exists() { command -v "$1" >/dev/null 2>&1; }

detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command_exists apt; then
            echo "ubuntu"
        elif command_exists dnf; then
            echo "fedora"
        else
            echo "linux"
        fi
    else
        echo "unknown"
    fi
}

# Safe copy function that handles symlinks and same files
safe_copy() {
    local source="$1"
    local target="$2"
    local name="$3"
    
    # Check if source exists
    if [[ ! -f "$source" ]]; then
        log_warning "$name source non trouvé: $source"
        return 0
    fi
    
    # Get real paths to compare
    local source_real
    local target_real
    
    source_real=$(readlink -f "$source" 2>/dev/null || echo "$source")
    
    # If target exists, get its real path
    if [[ -e "$target" ]]; then
        target_real=$(readlink -f "$target" 2>/dev/null || echo "$target")
        
        # If they point to the same file, skip
        if [[ "$source_real" == "$target_real" ]]; then
            log_info "$name déjà à jour (même fichier)"
            return 0
        fi
        
        # Backup existing file
        local backup_file="${target}.backup-$(date +%Y%m%d-%H%M%S)"
        cp "$target" "$backup_file" 2>/dev/null || true
        log_info "$name sauvegardé vers $(basename "$backup_file")"
    fi
    
    # Copy the file
    if cp "$source" "$target" 2>/dev/null; then
        log_success "$name mis à jour"
    else
        log_error "Échec copie $name"
        return 1
    fi
}

install_base_tools() {
    log_info "Installation des outils de base..."
    local os=$(detect_os)
    
    case "$os" in
        ubuntu)
            sudo apt update
            sudo apt install -y git curl wget zsh tmux build-essential neovim
            ;;
        fedora)
            sudo dnf install -y git curl wget zsh tmux @development-tools neovim
            ;;
        macos)
            if command_exists brew; then
                brew install git curl wget zsh tmux neovim
            else
                log_error "Homebrew requis pour macOS"
                return 1
            fi
            ;;
        *)
            log_error "OS non supporté: $os"
            return 1
            ;;
    esac
    
    log_success "Outils de base installés"
}

install_modern_tools() {
    log_info "Installation des outils modernes..."
    
    # Rust
    if ! command_exists cargo; then
        log_info "Installation de Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env" 2>/dev/null || export PATH="$HOME/.cargo/bin:$PATH"
    fi
    
    # Vérifier que cargo est accessible
    if ! command_exists cargo; then
        export PATH="$HOME/.cargo/bin:$PATH"
    fi
    
    # Outils Rust
    local tools=("du-dust:dust" "ripgrep:rg" "fd-find:fd" "bat:bat" "eza:eza")
    for tool_pair in "${tools[@]}"; do
        local package="${tool_pair%:*}"
        local binary="${tool_pair#*:}"
        if ! command_exists "$binary"; then
            log_info "Installation de $package..."
            cargo install "$package" || log_warning "Échec: $package (continuons)"
        fi
    done
    
    # Starship
    if ! command_exists starship; then
        log_info "Installation de Starship..."
        curl -sS https://starship.rs/install.sh | sh -s -- -y || log_warning "Échec Starship"
    fi
    
    # Zoxide
    if ! command_exists zoxide; then
        log_info "Installation de Zoxide..."
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash || log_warning "Échec Zoxide"
    fi
    
    log_success "Outils modernes installés"
}

setup_neovim_with_plugins() {
    local profile="$1"
    log_info "Configuration de Neovim avec plugins..."
    
    if ! command_exists nvim; then
        log_error "Neovim requis"
        return 1
    fi
    
    local nvim_config_source="$SCRIPT_DIR/configs/nvim"
    local nvim_config_target="$HOME/.config/nvim"
    local nvim_data_dir="$HOME/.local/share/nvim"
    
    # Backup existing config
    if [[ -d "$nvim_config_target" ]]; then
        local backup_dir="$nvim_config_target.backup-$(date +%Y%m%d-%H%M%S)"
        mv "$nvim_config_target" "$backup_dir"
        log_info "Config existante sauvegardée: $(basename "$backup_dir")"
    fi
    
    # Copy config
    if [[ -d "$nvim_config_source" ]]; then
        mkdir -p "$HOME/.config"
        cp -r "$nvim_config_source" "$nvim_config_target"
        log_success "Configuration Neovim copiée"
    else
        log_error "Config source non trouvée: $nvim_config_source"
        return 1
    fi
    
    # Install Lazy.nvim
    local lazy_path="$nvim_data_dir/lazy/lazy.nvim"
    if [[ ! -d "$lazy_path" ]]; then
        log_info "Installation de Lazy.nvim..."
        git clone --filter=blob:none https://github.com/folke/lazy.nvim.git --branch=stable "$lazy_path"
        log_success "Lazy.nvim installé"
    fi
    
    # Restore lockfile
    local source_lock="$nvim_config_source/lazy-lock.json"
    if [[ -f "$source_lock" ]]; then
        cp "$source_lock" "$nvim_config_target/lazy-lock.json"
        log_success "Lockfile des plugins restauré"
    fi
    
    # Install plugins (except minimal)
    if [[ "$profile" != "minimal" ]]; then
        log_info "Installation des plugins Neovim (peut prendre 2-5 minutes)..."
        cat > "/tmp/nvim_install_$$.lua" << 'EOF'
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({"git", "clone", "--filter=blob:none", "https://github.com/folke/lazy.nvim.git", "--branch=stable", lazypath})
end
vim.opt.rtp:prepend(lazypath)
require("config.options")
require("config.lazy")
require("lazy").install({ wait = true })
print("✅ Plugins installés!")
vim.cmd("qall!")
EOF
        
        if timeout 300 nvim --headless -u "/tmp/nvim_install_$$.lua" >/dev/null 2>&1; then
            log_success "Plugins installés automatiquement"
        else
            log_warning "Installation automatique échouée, plugins s'installeront au premier lancement"
        fi
        rm -f "/tmp/nvim_install_$$.lua"
    else
        log_info "Profil minimal: plugins s'installeront au premier lancement de Neovim"
    fi
    
    log_success "Neovim configuré"
}

setup_shell_config() {
    log_info "Configuration du shell..."
    
    # Backup existing .zshrc
    if [[ -f "$HOME/.zshrc" ]]; then
        local backup_file="$HOME/.zshrc.backup-$(date +%Y%m%d-%H%M%S)"
        cp "$HOME/.zshrc" "$backup_file"
        log_info "ZSH config sauvegardé: $(basename "$backup_file")"
        rm "$HOME/.zshrc"
    fi
    
    # Create symlink to zshrc
    local zshrc_source="$SCRIPT_DIR/configs/shell/zsh/zshrc"
    if [[ -f "$zshrc_source" ]]; then
        ln -s "$zshrc_source" "$HOME/.zshrc"
        log_success "Symlink ZSH créé vers $(basename "$zshrc_source")"
    else
        log_error "Source zshrc non trouvé: $zshrc_source"
        return 1
    fi
    
    # Copy other configs safely
    safe_copy "$SCRIPT_DIR/configs/tmux/tmux.conf" "$HOME/.tmux.conf" "Tmux"
    safe_copy "$SCRIPT_DIR/configs/git/gitconfig" "$HOME/.gitconfig" "Git"
    
    log_success "Shell configuré"
}

create_msh_command() {
    log_info "Création de la commande msh..."
    mkdir -p "$HOME/.local/bin"
    
    cat > "$HOME/.local/bin/msh" << 'EOF'
#!/bin/bash
set -euo pipefail

readonly SCRIPT_VERSION="2.1.1"
readonly REPO_DIR="$HOME/mini-sweet-home"
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly CYAN='\033[0;36m'
readonly RESET='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${RESET} $1"; }
log_success() { echo -e "${GREEN}[✓]${RESET} $1"; }
log_warning() { echo -e "${YELLOW}[⚠]${RESET} $1"; }
log_error() { echo -e "${RED}[✗]${RESET} $1"; }

show_help() {
    echo -e "${CYAN}🏠 Mini Sweet Home v$SCRIPT_VERSION${RESET}"
    echo "Usage: msh <command>"
    echo "Commands:"
    echo "  update     - Update repository and configs"
    echo "  doctor     - Run diagnostics"
    echo "  nvim       - Setup/update Neovim"
    echo "  backup     - Backup configurations"
    echo "  benchmark  - Run performance benchmark"
    echo "  version    - Show version"
    echo "  help       - Show this help"
}

case "${1:-help}" in
    update|u)
        if [[ -d "$REPO_DIR" ]]; then
            cd "$REPO_DIR" && git pull
            log_success "Repository updated"
            if [[ -f "setup-enhanced" ]]; then
                chmod +x setup-enhanced
                ./setup-enhanced minimal
            fi
        else
            log_error "Repository not found at $REPO_DIR"
        fi
        ;;
    doctor|d)
        echo -e "${CYAN}🏠 Mini Sweet Home Diagnostics${RESET}"
        echo "==============================="
        echo
        
        # Check tools
        echo "Core tools:"
        for tool in zsh git tmux nvim curl; do
            if command -v "$tool" >/dev/null; then
                log_success "$tool"
            else
                log_error "$tool missing"
            fi
        done
        
        echo
        echo "Configurations:"
        [[ -f "$HOME/.zshrc" ]] && log_success "ZSH config" || log_warning "ZSH config missing"
        [[ -f "$HOME/.tmux.conf" ]] && log_success "Tmux config" || log_warning "Tmux config missing"
        [[ -d "$HOME/.config/nvim" ]] && log_success "Neovim config" || log_warning "Neovim config missing"
        
        echo
        echo "Neovim plugins:"
        plugins="$HOME/.local/share/nvim/lazy"
        if [[ -d "$plugins" ]]; then
            count=$(find "$plugins" -maxdepth 1 -type d 2>/dev/null | wc -l)
            if [[ $count -gt 1 ]]; then
                log_success "$((count - 1)) plugins installed"
            else
                log_warning "No plugins found"
            fi
        else
            log_warning "Neovim data directory not found"
        fi
        
        echo
        echo "Modern tools:"
        for tool in dust rg fd bat eza starship zoxide; do
            if command -v "$tool" >/dev/null; then
                echo -e "  ✅ $tool"
            else
                echo -e "  ⚠️  $tool (optional)"
            fi
        done
        ;;
    nvim|n)
        if [[ -f "$REPO_DIR/scripts/setup-neovim.sh" ]]; then
            chmod +x "$REPO_DIR/scripts/setup-neovim.sh"
            "$REPO_DIR/scripts/setup-neovim.sh" --headless
        else
            log_error "Neovim setup script not found"
        fi
        ;;
    backup|b)
        backup_dir="$HOME/.mini-sweet-home-backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$backup_dir"
        
        [[ -f "$HOME/.zshrc" ]] && cp "$HOME/.zshrc" "$backup_dir/"
        [[ -f "$HOME/.tmux.conf" ]] && cp "$HOME/.tmux.conf" "$backup_dir/"
        [[ -f "$HOME/.gitconfig" ]] && cp "$HOME/.gitconfig" "$backup_dir/"
        [[ -d "$HOME/.config/nvim" ]] && cp -r "$HOME/.config/nvim" "$backup_dir/"
        
        log_success "Backup created: $backup_dir"
        ;;
    benchmark|bench)
        if [[ -f "$REPO_DIR/scripts/benchmark" ]]; then
            chmod +x "$REPO_DIR/scripts/benchmark"
            "$REPO_DIR/scripts/benchmark"
        else
            log_error "Benchmark script not found"
        fi
        ;;
    version|v)
        echo "Mini Sweet Home v$SCRIPT_VERSION"
        ;;
    *)
        show_help
        ;;
esac
EOF
    
    chmod +x "$HOME/.local/bin/msh"
    log_success "Commande msh créée"
}

show_menu() {
    clear
    echo -e "${CYAN}🏠 Mini Sweet Home - Installation Enhanced v2.1.1${RESET}"
    echo
    echo "Profils disponibles:"
    echo "1) 🏃‍♂️ Minimal   - Base + Neovim (~3 min)"
    echo "2) ⚡ Modern    - + outils modernes (~8 min)"
    echo "3) 👩‍💻 Developer - Setup complet (~15 min)"
    echo "4) 🖥️ Server    - Config serveur (~5 min)"
    echo "5) ❌ Exit"
    echo
}

get_choice() {
    while true; do
        read -p "Choix [1-5]: " choice
        case $choice in
            1) echo "minimal"; return ;;
            2) echo "modern"; return ;;
            3) echo "developer"; return ;;
            4) echo "server"; return ;;
            5) exit 0 ;;
            *) echo "Invalide" ;;
        esac
    done
}

install_profile() {
    local profile="$1"
    log_header "🚀 Installation: $profile"
    
    case "$profile" in
        minimal)
            install_base_tools
            setup_shell_config
            setup_neovim_with_plugins "$profile"
            create_msh_command
            ;;
        modern)
            install_base_tools
            install_modern_tools
            setup_shell_config
            setup_neovim_with_plugins "$profile"
            create_msh_command
            ;;
        developer)
            install_base_tools
            install_modern_tools
            setup_shell_config
            setup_neovim_with_plugins "$profile"
            create_msh_command
            
            # Dev tools
            log_info "Installation des outils développeur..."
            if ! command_exists node; then
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - >/dev/null 2>&1
                sudo apt-get install -y nodejs >/dev/null 2>&1
            fi
            if command_exists npm; then
                npm install -g typescript-language-server bash-language-server >/dev/null 2>&1 || log_warning "Échec installation LSP servers"
            fi
            log_success "Outils développeur installés"
            ;;
        server)
            install_base_tools
            setup_shell_config
            setup_neovim_with_plugins "minimal"
            create_msh_command
            ;;
    esac
}

main() {
    local profile="${1:-}"
    
    if ! command_exists git || ! command_exists curl; then
        log_error "git et curl requis"
        exit 1
    fi
    
    [[ -z "$profile" ]] && { show_menu; profile=$(get_choice); }
    
    case "$profile" in
        minimal|modern|developer|server) ;;
        *) log_error "Profil invalide: $profile"; exit 1 ;;
    esac
    
    echo
    log_info "Installation du profil: $profile"
    read -p "Continuer? [Y/n]: " -r
    [[ $REPLY =~ ^[Nn]$ ]] && { log_info "Annulé"; exit 0; }
    
    install_profile "$profile"
    
    clear
    log_header "🎉 Installation terminée avec succès!"
    echo
    echo -e "${GREEN}Profil installé: ${BOLD}$profile${RESET}"
    echo
    echo "🚀 Prochaines étapes:"
    echo "  source ~/.zshrc  # Recharger le shell"
    echo "  msh doctor       # Vérifier l'installation"
    echo "  nvim             # Lancer Neovim (plugins prêts!)"
    echo
    echo "🛠️ Commandes utiles:"
    echo "  msh update       # Mettre à jour"
    echo "  msh backup       # Sauvegarder"
    echo "  msh nvim         # Reconfigurer Neovim"
    echo
    
    if [[ "$profile" =~ ^(modern|developer)$ ]]; then
        echo "⚡ Nouveaux outils disponibles:"
        echo "  dust, rg, fd, bat, eza, starship, zoxide"
        echo
    fi
    
    if [[ "$profile" == "developer" ]]; then
        echo "👩‍💻 Outils développeur:"
        echo "  Node.js, TypeScript LSP, Bash LSP"
        echo
    fi
    
    echo -e "${GREEN}Environnement prêt! Redémarrez votre terminal pour la meilleure expérience.${RESET}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
